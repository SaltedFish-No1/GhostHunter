#version 330 core

struct Light {
    vec3  position;
    vec3  direction;
    float cutOff;

    float constant;
    float linear;
    float quadratic;
};
struct Material {
//the refleted light color and it strength
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
}; 

struct SingleColor
{
    bool isEnable;
    vec3 color;
};


out vec4 FragColor;

in vec2 TexCoords;
in vec3 Normal;
in vec3 FragPos;

uniform Light torch;
//uniform Light ghost1;
//uniform Light ghost2;
//uniform Light ghost3;
//uniform Light ghost4;

uniform Material material;


uniform sampler2D texture_diffuse1;
uniform sampler2D texture_diffuse2;
uniform sampler2D texture_diffuse3;
uniform sampler2D texture_specular1;
uniform sampler2D texture_specular2;
uniform SingleColor singleColor;

void main()
{   
    vec4 diffuseColor = texture(texture_diffuse1, TexCoords) + texture(texture_diffuse2, TexCoords) + texture(texture_diffuse3, TexCoords);
    vec4 specularColor = texture(texture_specular1, TexCoords) + texture(texture_specular2, TexCoords);

    if(singleColor.isEnable)
    {
        diffuseColor = vec4(singleColor.color, 1.0);
    }


    //ambient light
    vec4 ambientComponent = vec4(material.ambient, 1.0) * diffuseColor;

    //torch light  
    vec3 torchColor = vec3(1.0, 1.0, 1.0);
    vec3 viewDir = normalize(FragPos - torch.position);
    vec3 norm = normalize(Normal);
    vec3 torchDir = normalize(FragPos - torch.position);
    //Attenuation
    float distance = length(torch.position - FragPos);
    float attenuation = 1.0 / (torch.constant + torch.linear * distance + torch.quadratic * (distance * distance));

    float cosTheta = dot(torchDir, normalize(torch.direction));
    if(cosTheta > torch.cutOff) //two angles less than 90 degree, bigger cos, less angle
    {   
        // compute light
        //diffuse light for torch light
        vec3 torchDiffuse = material.diffuse * max(-dot(norm, torchDir), 0.0) * torchColor;; //dot(norm, lightDir) is a negative number
        vec4 torchDiffuseComponent = vec4(torchDiffuse, 1.0) * diffuseColor;
        //specular light for torch light
        vec3 torchReflectDir = reflect(torchDir, norm);
        vec3 torchSpecular = material.specular * pow(max(-dot(viewDir, torchReflectDir), 0.0), material.shininess) * torchColor;
        vec4 torchSpecularComponent = vec4(torchSpecular, 1.0) * specularColor;
        FragColor = ambientComponent + attenuation * (torchDiffuseComponent + torchSpecularComponent);
    }
    else  // use ambient light
    {
        FragColor = ambientComponent;
    }


}